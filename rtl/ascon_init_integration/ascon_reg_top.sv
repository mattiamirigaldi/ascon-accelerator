// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module ascon_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 6
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output ascon_reg_pkg::ascon_reg2hw_t reg2hw,  // Write
    input ascon_reg_pkg::ascon_hw2reg_t hw2reg,  // Read


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import ascon_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic               reg_we;
  logic               reg_re;
  logic [BlockAw-1:0] reg_addr;
  logic [     DW-1:0] reg_wdata;
  logic [    DBW-1:0] reg_be;
  logic [     DW-1:0] reg_rdata;
  logic               reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic status_qs;
  logic status_wd;
  logic status_we;
  logic [31:0] state_0_qs;
  logic [31:0] state_0_wd;
  logic state_0_we;
  logic [31:0] state_1_qs;
  logic [31:0] state_1_wd;
  logic state_1_we;
  logic [31:0] state_2_qs;
  logic [31:0] state_2_wd;
  logic state_2_we;
  logic [31:0] state_3_qs;
  logic [31:0] state_3_wd;
  logic state_3_we;
  logic [31:0] state_4_qs;
  logic [31:0] state_4_wd;
  logic state_4_we;
  logic [31:0] state_5_qs;
  logic [31:0] state_5_wd;
  logic state_5_we;
  logic [31:0] state_6_qs;
  logic [31:0] state_6_wd;
  logic state_6_we;
  logic [31:0] state_7_qs;
  logic [31:0] state_7_wd;
  logic state_7_we;
  logic [31:0] state_8_qs;
  logic [31:0] state_8_wd;
  logic state_8_we;
  logic [31:0] state_9_qs;
  logic [31:0] state_9_wd;
  logic state_9_we;

  // Register instances
  // R[status]: V(False)

  prim_subreg #(
      .DW      (1),
      .SWACCESS("RW"),
      .RESVAL  (1'h0)
  ) u_status (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(status_we),
      .wd(status_wd),

      // from internal hardware
      .de(hw2reg.status.de),
      .d (hw2reg.status.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.status.q),

      // to register interface (read)
      .qs(status_qs)
  );



  // Subregister 0 of Multireg state
  // R[state_0]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_0_we),
      .wd(state_0_wd),

      // from internal hardware
      .de(hw2reg.state[0].de),
      .d (hw2reg.state[0].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[0].q),

      // to register interface (read)
      .qs(state_0_qs)
  );

  // Subregister 1 of Multireg state
  // R[state_1]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_1_we),
      .wd(state_1_wd),

      // from internal hardware
      .de(hw2reg.state[1].de),
      .d (hw2reg.state[1].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[1].q),

      // to register interface (read)
      .qs(state_1_qs)
  );

  // Subregister 2 of Multireg state
  // R[state_2]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_2_we),
      .wd(state_2_wd),

      // from internal hardware
      .de(hw2reg.state[2].de),
      .d (hw2reg.state[2].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[2].q),

      // to register interface (read)
      .qs(state_2_qs)
  );

  // Subregister 3 of Multireg state
  // R[state_3]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_3_we),
      .wd(state_3_wd),

      // from internal hardware
      .de(hw2reg.state[3].de),
      .d (hw2reg.state[3].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[3].q),

      // to register interface (read)
      .qs(state_3_qs)
  );

  // Subregister 4 of Multireg state
  // R[state_4]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_4_we),
      .wd(state_4_wd),

      // from internal hardware
      .de(hw2reg.state[4].de),
      .d (hw2reg.state[4].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[4].q),

      // to register interface (read)
      .qs(state_4_qs)
  );

  // Subregister 5 of Multireg state
  // R[state_5]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_5_we),
      .wd(state_5_wd),

      // from internal hardware
      .de(hw2reg.state[5].de),
      .d (hw2reg.state[5].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[5].q),

      // to register interface (read)
      .qs(state_5_qs)
  );

  // Subregister 6 of Multireg state
  // R[state_6]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_6_we),
      .wd(state_6_wd),

      // from internal hardware
      .de(hw2reg.state[6].de),
      .d (hw2reg.state[6].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[6].q),

      // to register interface (read)
      .qs(state_6_qs)
  );

  // Subregister 7 of Multireg state
  // R[state_7]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_7_we),
      .wd(state_7_wd),

      // from internal hardware
      .de(hw2reg.state[7].de),
      .d (hw2reg.state[7].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[7].q),

      // to register interface (read)
      .qs(state_7_qs)
  );

  // Subregister 8 of Multireg state
  // R[state_8]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_8_we),
      .wd(state_8_wd),

      // from internal hardware
      .de(hw2reg.state[8].de),
      .d (hw2reg.state[8].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[8].q),

      // to register interface (read)
      .qs(state_8_qs)
  );

  // Subregister 9 of Multireg state
  // R[state_9]: V(False)

  prim_subreg #(
      .DW      (32),
      .SWACCESS("RW"),
      .RESVAL  (32'h0)
  ) u_state_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(state_9_we),
      .wd(state_9_wd),

      // from internal hardware
      .de(hw2reg.state[9].de),
      .d (hw2reg.state[9].d),

      // to internal hardware
      .qe(),
      .q (reg2hw.state[9].q),

      // to register interface (read)
      .qs(state_9_qs)
  );




  logic [10:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == ASCON_STATUS_OFFSET);
    addr_hit[1] = (reg_addr == ASCON_STATE_0_OFFSET);
    addr_hit[2] = (reg_addr == ASCON_STATE_1_OFFSET);
    addr_hit[3] = (reg_addr == ASCON_STATE_2_OFFSET);
    addr_hit[4] = (reg_addr == ASCON_STATE_3_OFFSET);
    addr_hit[5] = (reg_addr == ASCON_STATE_4_OFFSET);
    addr_hit[6] = (reg_addr == ASCON_STATE_5_OFFSET);
    addr_hit[7] = (reg_addr == ASCON_STATE_6_OFFSET);
    addr_hit[8] = (reg_addr == ASCON_STATE_7_OFFSET);
    addr_hit[9] = (reg_addr == ASCON_STATE_8_OFFSET);
    addr_hit[10] = (reg_addr == ASCON_STATE_9_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(ASCON_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(ASCON_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(ASCON_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(ASCON_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(ASCON_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(ASCON_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(ASCON_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(ASCON_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(ASCON_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(ASCON_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(ASCON_PERMIT[10] & ~reg_be)))));
  end

  assign status_we  = addr_hit[0] & reg_we & !reg_error;
  assign status_wd  = reg_wdata[0];

  assign state_0_we = addr_hit[1] & reg_we & !reg_error;
  assign state_0_wd = reg_wdata[31:0];

  assign state_1_we = addr_hit[2] & reg_we & !reg_error;
  assign state_1_wd = reg_wdata[31:0];

  assign state_2_we = addr_hit[3] & reg_we & !reg_error;
  assign state_2_wd = reg_wdata[31:0];

  assign state_3_we = addr_hit[4] & reg_we & !reg_error;
  assign state_3_wd = reg_wdata[31:0];

  assign state_4_we = addr_hit[5] & reg_we & !reg_error;
  assign state_4_wd = reg_wdata[31:0];

  assign state_5_we = addr_hit[6] & reg_we & !reg_error;
  assign state_5_wd = reg_wdata[31:0];

  assign state_6_we = addr_hit[7] & reg_we & !reg_error;
  assign state_6_wd = reg_wdata[31:0];

  assign state_7_we = addr_hit[8] & reg_we & !reg_error;
  assign state_7_wd = reg_wdata[31:0];

  assign state_8_we = addr_hit[9] & reg_we & !reg_error;
  assign state_8_wd = reg_wdata[31:0];

  assign state_9_we = addr_hit[10] & reg_we & !reg_error;
  assign state_9_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = status_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = state_0_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = state_1_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = state_2_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[31:0] = state_3_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[31:0] = state_4_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[31:0] = state_5_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:0] = state_6_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = state_7_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = state_8_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = state_9_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module ascon_reg_top_intf #(
    parameter  int AW = 6,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output ascon_reg_pkg::ascon_reg2hw_t reg2hw,  // Write
    input ascon_reg_pkg::ascon_hw2reg_t hw2reg,  // Read
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  ascon_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .hw2reg,  // Read
      .devmode_i
  );

endmodule


