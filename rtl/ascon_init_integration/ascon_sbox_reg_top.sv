// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module ascon_sbox_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 5
) (
    input logic clk_i,
    input logic rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output ascon_sbox_reg_pkg::ascon_sbox_reg2hw_t reg2hw,  // Write
    input ascon_sbox_reg_pkg::ascon_sbox_hw2reg_t hw2reg,  // Read


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import ascon_sbox_reg_pkg::*;

  localparam int DW = 32;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic               reg_we;
  logic               reg_re;
  logic [BlockAw-1:0] reg_addr;
  logic [     DW-1:0] reg_wdata;
  logic [    DBW-1:0] reg_be;
  logic [     DW-1:0] reg_rdata;
  logic               reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr[BlockAw-1:0];
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [4:0] sbox_0_entry_0_0_qs;
  logic [4:0] sbox_0_entry_0_0_wd;
  logic sbox_0_entry_0_0_we;
  logic [4:0] sbox_0_entry_1_0_qs;
  logic [4:0] sbox_0_entry_1_0_wd;
  logic sbox_0_entry_1_0_we;
  logic [4:0] sbox_0_entry_2_0_qs;
  logic [4:0] sbox_0_entry_2_0_wd;
  logic sbox_0_entry_2_0_we;
  logic [4:0] sbox_0_entry_3_0_qs;
  logic [4:0] sbox_0_entry_3_0_wd;
  logic sbox_0_entry_3_0_we;
  logic [4:0] sbox_1_entry_0_1_qs;
  logic [4:0] sbox_1_entry_0_1_wd;
  logic sbox_1_entry_0_1_we;
  logic [4:0] sbox_1_entry_1_1_qs;
  logic [4:0] sbox_1_entry_1_1_wd;
  logic sbox_1_entry_1_1_we;
  logic [4:0] sbox_1_entry_2_1_qs;
  logic [4:0] sbox_1_entry_2_1_wd;
  logic sbox_1_entry_2_1_we;
  logic [4:0] sbox_1_entry_3_1_qs;
  logic [4:0] sbox_1_entry_3_1_wd;
  logic sbox_1_entry_3_1_we;
  logic [4:0] sbox_2_entry_0_2_qs;
  logic [4:0] sbox_2_entry_0_2_wd;
  logic sbox_2_entry_0_2_we;
  logic [4:0] sbox_2_entry_1_2_qs;
  logic [4:0] sbox_2_entry_1_2_wd;
  logic sbox_2_entry_1_2_we;
  logic [4:0] sbox_2_entry_2_2_qs;
  logic [4:0] sbox_2_entry_2_2_wd;
  logic sbox_2_entry_2_2_we;
  logic [4:0] sbox_2_entry_3_2_qs;
  logic [4:0] sbox_2_entry_3_2_wd;
  logic sbox_2_entry_3_2_we;
  logic [4:0] sbox_3_entry_0_3_qs;
  logic [4:0] sbox_3_entry_0_3_wd;
  logic sbox_3_entry_0_3_we;
  logic [4:0] sbox_3_entry_1_3_qs;
  logic [4:0] sbox_3_entry_1_3_wd;
  logic sbox_3_entry_1_3_we;
  logic [4:0] sbox_3_entry_2_3_qs;
  logic [4:0] sbox_3_entry_2_3_wd;
  logic sbox_3_entry_2_3_we;
  logic [4:0] sbox_3_entry_3_3_qs;
  logic [4:0] sbox_3_entry_3_3_wd;
  logic sbox_3_entry_3_3_we;
  logic [4:0] sbox_4_entry_0_4_qs;
  logic [4:0] sbox_4_entry_0_4_wd;
  logic sbox_4_entry_0_4_we;
  logic [4:0] sbox_4_entry_1_4_qs;
  logic [4:0] sbox_4_entry_1_4_wd;
  logic sbox_4_entry_1_4_we;
  logic [4:0] sbox_4_entry_2_4_qs;
  logic [4:0] sbox_4_entry_2_4_wd;
  logic sbox_4_entry_2_4_we;
  logic [4:0] sbox_4_entry_3_4_qs;
  logic [4:0] sbox_4_entry_3_4_wd;
  logic sbox_4_entry_3_4_we;
  logic [4:0] sbox_5_entry_0_5_qs;
  logic [4:0] sbox_5_entry_0_5_wd;
  logic sbox_5_entry_0_5_we;
  logic [4:0] sbox_5_entry_1_5_qs;
  logic [4:0] sbox_5_entry_1_5_wd;
  logic sbox_5_entry_1_5_we;
  logic [4:0] sbox_5_entry_2_5_qs;
  logic [4:0] sbox_5_entry_2_5_wd;
  logic sbox_5_entry_2_5_we;
  logic [4:0] sbox_5_entry_3_5_qs;
  logic [4:0] sbox_5_entry_3_5_wd;
  logic sbox_5_entry_3_5_we;
  logic [4:0] sbox_6_entry_0_6_qs;
  logic [4:0] sbox_6_entry_0_6_wd;
  logic sbox_6_entry_0_6_we;
  logic [4:0] sbox_6_entry_1_6_qs;
  logic [4:0] sbox_6_entry_1_6_wd;
  logic sbox_6_entry_1_6_we;
  logic [4:0] sbox_6_entry_2_6_qs;
  logic [4:0] sbox_6_entry_2_6_wd;
  logic sbox_6_entry_2_6_we;
  logic [4:0] sbox_6_entry_3_6_qs;
  logic [4:0] sbox_6_entry_3_6_wd;
  logic sbox_6_entry_3_6_we;
  logic [4:0] sbox_7_entry_0_7_qs;
  logic [4:0] sbox_7_entry_0_7_wd;
  logic sbox_7_entry_0_7_we;
  logic [4:0] sbox_7_entry_1_7_qs;
  logic [4:0] sbox_7_entry_1_7_wd;
  logic sbox_7_entry_1_7_we;
  logic [4:0] sbox_7_entry_2_7_qs;
  logic [4:0] sbox_7_entry_2_7_wd;
  logic sbox_7_entry_2_7_we;
  logic [4:0] sbox_7_entry_3_7_qs;
  logic [4:0] sbox_7_entry_3_7_wd;
  logic sbox_7_entry_3_7_we;

  // Register instances

  // Subregister 0 of Multireg sbox
  // R[sbox_0]: V(False)

  // F[entry_0_0]: 4:0
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_0_entry_0_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_0_entry_0_0_we),
      .wd(sbox_0_entry_0_0_wd),

      // from internal hardware
      .de(hw2reg.sbox[0].entry_0.de),
      .d (hw2reg.sbox[0].entry_0.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[0].entry_0.q),

      // to register interface (read)
      .qs(sbox_0_entry_0_0_qs)
  );


  // F[entry_1_0]: 9:5
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_0_entry_1_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_0_entry_1_0_we),
      .wd(sbox_0_entry_1_0_wd),

      // from internal hardware
      .de(hw2reg.sbox[0].entry_1.de),
      .d (hw2reg.sbox[0].entry_1.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[0].entry_1.q),

      // to register interface (read)
      .qs(sbox_0_entry_1_0_qs)
  );


  // F[entry_2_0]: 14:10
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_0_entry_2_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_0_entry_2_0_we),
      .wd(sbox_0_entry_2_0_wd),

      // from internal hardware
      .de(hw2reg.sbox[0].entry_2.de),
      .d (hw2reg.sbox[0].entry_2.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[0].entry_2.q),

      // to register interface (read)
      .qs(sbox_0_entry_2_0_qs)
  );


  // F[entry_3_0]: 19:15
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_0_entry_3_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_0_entry_3_0_we),
      .wd(sbox_0_entry_3_0_wd),

      // from internal hardware
      .de(hw2reg.sbox[0].entry_3.de),
      .d (hw2reg.sbox[0].entry_3.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[0].entry_3.q),

      // to register interface (read)
      .qs(sbox_0_entry_3_0_qs)
  );


  // Subregister 1 of Multireg sbox
  // R[sbox_1]: V(False)

  // F[entry_0_1]: 4:0
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_1_entry_0_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_1_entry_0_1_we),
      .wd(sbox_1_entry_0_1_wd),

      // from internal hardware
      .de(hw2reg.sbox[1].entry_0.de),
      .d (hw2reg.sbox[1].entry_0.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[1].entry_0.q),

      // to register interface (read)
      .qs(sbox_1_entry_0_1_qs)
  );


  // F[entry_1_1]: 9:5
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_1_entry_1_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_1_entry_1_1_we),
      .wd(sbox_1_entry_1_1_wd),

      // from internal hardware
      .de(hw2reg.sbox[1].entry_1.de),
      .d (hw2reg.sbox[1].entry_1.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[1].entry_1.q),

      // to register interface (read)
      .qs(sbox_1_entry_1_1_qs)
  );


  // F[entry_2_1]: 14:10
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_1_entry_2_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_1_entry_2_1_we),
      .wd(sbox_1_entry_2_1_wd),

      // from internal hardware
      .de(hw2reg.sbox[1].entry_2.de),
      .d (hw2reg.sbox[1].entry_2.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[1].entry_2.q),

      // to register interface (read)
      .qs(sbox_1_entry_2_1_qs)
  );


  // F[entry_3_1]: 19:15
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_1_entry_3_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_1_entry_3_1_we),
      .wd(sbox_1_entry_3_1_wd),

      // from internal hardware
      .de(hw2reg.sbox[1].entry_3.de),
      .d (hw2reg.sbox[1].entry_3.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[1].entry_3.q),

      // to register interface (read)
      .qs(sbox_1_entry_3_1_qs)
  );


  // Subregister 2 of Multireg sbox
  // R[sbox_2]: V(False)

  // F[entry_0_2]: 4:0
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_2_entry_0_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_2_entry_0_2_we),
      .wd(sbox_2_entry_0_2_wd),

      // from internal hardware
      .de(hw2reg.sbox[2].entry_0.de),
      .d (hw2reg.sbox[2].entry_0.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[2].entry_0.q),

      // to register interface (read)
      .qs(sbox_2_entry_0_2_qs)
  );


  // F[entry_1_2]: 9:5
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_2_entry_1_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_2_entry_1_2_we),
      .wd(sbox_2_entry_1_2_wd),

      // from internal hardware
      .de(hw2reg.sbox[2].entry_1.de),
      .d (hw2reg.sbox[2].entry_1.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[2].entry_1.q),

      // to register interface (read)
      .qs(sbox_2_entry_1_2_qs)
  );


  // F[entry_2_2]: 14:10
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_2_entry_2_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_2_entry_2_2_we),
      .wd(sbox_2_entry_2_2_wd),

      // from internal hardware
      .de(hw2reg.sbox[2].entry_2.de),
      .d (hw2reg.sbox[2].entry_2.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[2].entry_2.q),

      // to register interface (read)
      .qs(sbox_2_entry_2_2_qs)
  );


  // F[entry_3_2]: 19:15
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_2_entry_3_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_2_entry_3_2_we),
      .wd(sbox_2_entry_3_2_wd),

      // from internal hardware
      .de(hw2reg.sbox[2].entry_3.de),
      .d (hw2reg.sbox[2].entry_3.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[2].entry_3.q),

      // to register interface (read)
      .qs(sbox_2_entry_3_2_qs)
  );


  // Subregister 3 of Multireg sbox
  // R[sbox_3]: V(False)

  // F[entry_0_3]: 4:0
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_3_entry_0_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_3_entry_0_3_we),
      .wd(sbox_3_entry_0_3_wd),

      // from internal hardware
      .de(hw2reg.sbox[3].entry_0.de),
      .d (hw2reg.sbox[3].entry_0.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[3].entry_0.q),

      // to register interface (read)
      .qs(sbox_3_entry_0_3_qs)
  );


  // F[entry_1_3]: 9:5
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_3_entry_1_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_3_entry_1_3_we),
      .wd(sbox_3_entry_1_3_wd),

      // from internal hardware
      .de(hw2reg.sbox[3].entry_1.de),
      .d (hw2reg.sbox[3].entry_1.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[3].entry_1.q),

      // to register interface (read)
      .qs(sbox_3_entry_1_3_qs)
  );


  // F[entry_2_3]: 14:10
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_3_entry_2_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_3_entry_2_3_we),
      .wd(sbox_3_entry_2_3_wd),

      // from internal hardware
      .de(hw2reg.sbox[3].entry_2.de),
      .d (hw2reg.sbox[3].entry_2.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[3].entry_2.q),

      // to register interface (read)
      .qs(sbox_3_entry_2_3_qs)
  );


  // F[entry_3_3]: 19:15
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_3_entry_3_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_3_entry_3_3_we),
      .wd(sbox_3_entry_3_3_wd),

      // from internal hardware
      .de(hw2reg.sbox[3].entry_3.de),
      .d (hw2reg.sbox[3].entry_3.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[3].entry_3.q),

      // to register interface (read)
      .qs(sbox_3_entry_3_3_qs)
  );


  // Subregister 4 of Multireg sbox
  // R[sbox_4]: V(False)

  // F[entry_0_4]: 4:0
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_4_entry_0_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_4_entry_0_4_we),
      .wd(sbox_4_entry_0_4_wd),

      // from internal hardware
      .de(hw2reg.sbox[4].entry_0.de),
      .d (hw2reg.sbox[4].entry_0.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[4].entry_0.q),

      // to register interface (read)
      .qs(sbox_4_entry_0_4_qs)
  );


  // F[entry_1_4]: 9:5
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_4_entry_1_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_4_entry_1_4_we),
      .wd(sbox_4_entry_1_4_wd),

      // from internal hardware
      .de(hw2reg.sbox[4].entry_1.de),
      .d (hw2reg.sbox[4].entry_1.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[4].entry_1.q),

      // to register interface (read)
      .qs(sbox_4_entry_1_4_qs)
  );


  // F[entry_2_4]: 14:10
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_4_entry_2_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_4_entry_2_4_we),
      .wd(sbox_4_entry_2_4_wd),

      // from internal hardware
      .de(hw2reg.sbox[4].entry_2.de),
      .d (hw2reg.sbox[4].entry_2.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[4].entry_2.q),

      // to register interface (read)
      .qs(sbox_4_entry_2_4_qs)
  );


  // F[entry_3_4]: 19:15
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_4_entry_3_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_4_entry_3_4_we),
      .wd(sbox_4_entry_3_4_wd),

      // from internal hardware
      .de(hw2reg.sbox[4].entry_3.de),
      .d (hw2reg.sbox[4].entry_3.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[4].entry_3.q),

      // to register interface (read)
      .qs(sbox_4_entry_3_4_qs)
  );


  // Subregister 5 of Multireg sbox
  // R[sbox_5]: V(False)

  // F[entry_0_5]: 4:0
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_5_entry_0_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_5_entry_0_5_we),
      .wd(sbox_5_entry_0_5_wd),

      // from internal hardware
      .de(hw2reg.sbox[5].entry_0.de),
      .d (hw2reg.sbox[5].entry_0.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[5].entry_0.q),

      // to register interface (read)
      .qs(sbox_5_entry_0_5_qs)
  );


  // F[entry_1_5]: 9:5
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_5_entry_1_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_5_entry_1_5_we),
      .wd(sbox_5_entry_1_5_wd),

      // from internal hardware
      .de(hw2reg.sbox[5].entry_1.de),
      .d (hw2reg.sbox[5].entry_1.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[5].entry_1.q),

      // to register interface (read)
      .qs(sbox_5_entry_1_5_qs)
  );


  // F[entry_2_5]: 14:10
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_5_entry_2_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_5_entry_2_5_we),
      .wd(sbox_5_entry_2_5_wd),

      // from internal hardware
      .de(hw2reg.sbox[5].entry_2.de),
      .d (hw2reg.sbox[5].entry_2.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[5].entry_2.q),

      // to register interface (read)
      .qs(sbox_5_entry_2_5_qs)
  );


  // F[entry_3_5]: 19:15
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_5_entry_3_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_5_entry_3_5_we),
      .wd(sbox_5_entry_3_5_wd),

      // from internal hardware
      .de(hw2reg.sbox[5].entry_3.de),
      .d (hw2reg.sbox[5].entry_3.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[5].entry_3.q),

      // to register interface (read)
      .qs(sbox_5_entry_3_5_qs)
  );


  // Subregister 6 of Multireg sbox
  // R[sbox_6]: V(False)

  // F[entry_0_6]: 4:0
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_6_entry_0_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_6_entry_0_6_we),
      .wd(sbox_6_entry_0_6_wd),

      // from internal hardware
      .de(hw2reg.sbox[6].entry_0.de),
      .d (hw2reg.sbox[6].entry_0.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[6].entry_0.q),

      // to register interface (read)
      .qs(sbox_6_entry_0_6_qs)
  );


  // F[entry_1_6]: 9:5
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_6_entry_1_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_6_entry_1_6_we),
      .wd(sbox_6_entry_1_6_wd),

      // from internal hardware
      .de(hw2reg.sbox[6].entry_1.de),
      .d (hw2reg.sbox[6].entry_1.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[6].entry_1.q),

      // to register interface (read)
      .qs(sbox_6_entry_1_6_qs)
  );


  // F[entry_2_6]: 14:10
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_6_entry_2_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_6_entry_2_6_we),
      .wd(sbox_6_entry_2_6_wd),

      // from internal hardware
      .de(hw2reg.sbox[6].entry_2.de),
      .d (hw2reg.sbox[6].entry_2.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[6].entry_2.q),

      // to register interface (read)
      .qs(sbox_6_entry_2_6_qs)
  );


  // F[entry_3_6]: 19:15
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_6_entry_3_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_6_entry_3_6_we),
      .wd(sbox_6_entry_3_6_wd),

      // from internal hardware
      .de(hw2reg.sbox[6].entry_3.de),
      .d (hw2reg.sbox[6].entry_3.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[6].entry_3.q),

      // to register interface (read)
      .qs(sbox_6_entry_3_6_qs)
  );


  // Subregister 7 of Multireg sbox
  // R[sbox_7]: V(False)

  // F[entry_0_7]: 4:0
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_7_entry_0_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_7_entry_0_7_we),
      .wd(sbox_7_entry_0_7_wd),

      // from internal hardware
      .de(hw2reg.sbox[7].entry_0.de),
      .d (hw2reg.sbox[7].entry_0.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[7].entry_0.q),

      // to register interface (read)
      .qs(sbox_7_entry_0_7_qs)
  );


  // F[entry_1_7]: 9:5
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_7_entry_1_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_7_entry_1_7_we),
      .wd(sbox_7_entry_1_7_wd),

      // from internal hardware
      .de(hw2reg.sbox[7].entry_1.de),
      .d (hw2reg.sbox[7].entry_1.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[7].entry_1.q),

      // to register interface (read)
      .qs(sbox_7_entry_1_7_qs)
  );


  // F[entry_2_7]: 14:10
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_7_entry_2_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_7_entry_2_7_we),
      .wd(sbox_7_entry_2_7_wd),

      // from internal hardware
      .de(hw2reg.sbox[7].entry_2.de),
      .d (hw2reg.sbox[7].entry_2.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[7].entry_2.q),

      // to register interface (read)
      .qs(sbox_7_entry_2_7_qs)
  );


  // F[entry_3_7]: 19:15
  prim_subreg #(
      .DW      (5),
      .SWACCESS("RW"),
      .RESVAL  (5'h0)
  ) u_sbox_7_entry_3_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(sbox_7_entry_3_7_we),
      .wd(sbox_7_entry_3_7_wd),

      // from internal hardware
      .de(hw2reg.sbox[7].entry_3.de),
      .d (hw2reg.sbox[7].entry_3.d),

      // to internal hardware
      .qe(),
      .q (reg2hw.sbox[7].entry_3.q),

      // to register interface (read)
      .qs(sbox_7_entry_3_7_qs)
  );





  logic [7:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == ASCON_SBOX_SBOX_0_OFFSET);
    addr_hit[1] = (reg_addr == ASCON_SBOX_SBOX_1_OFFSET);
    addr_hit[2] = (reg_addr == ASCON_SBOX_SBOX_2_OFFSET);
    addr_hit[3] = (reg_addr == ASCON_SBOX_SBOX_3_OFFSET);
    addr_hit[4] = (reg_addr == ASCON_SBOX_SBOX_4_OFFSET);
    addr_hit[5] = (reg_addr == ASCON_SBOX_SBOX_5_OFFSET);
    addr_hit[6] = (reg_addr == ASCON_SBOX_SBOX_6_OFFSET);
    addr_hit[7] = (reg_addr == ASCON_SBOX_SBOX_7_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[0] & (|(ASCON_SBOX_PERMIT[0] & ~reg_be))) |
               (addr_hit[1] & (|(ASCON_SBOX_PERMIT[1] & ~reg_be))) |
               (addr_hit[2] & (|(ASCON_SBOX_PERMIT[2] & ~reg_be))) |
               (addr_hit[3] & (|(ASCON_SBOX_PERMIT[3] & ~reg_be))) |
               (addr_hit[4] & (|(ASCON_SBOX_PERMIT[4] & ~reg_be))) |
               (addr_hit[5] & (|(ASCON_SBOX_PERMIT[5] & ~reg_be))) |
               (addr_hit[6] & (|(ASCON_SBOX_PERMIT[6] & ~reg_be))) |
               (addr_hit[7] & (|(ASCON_SBOX_PERMIT[7] & ~reg_be)))));
  end

  assign sbox_0_entry_0_0_we = addr_hit[0] & reg_we & !reg_error;
  assign sbox_0_entry_0_0_wd = reg_wdata[4:0];

  assign sbox_0_entry_1_0_we = addr_hit[0] & reg_we & !reg_error;
  assign sbox_0_entry_1_0_wd = reg_wdata[9:5];

  assign sbox_0_entry_2_0_we = addr_hit[0] & reg_we & !reg_error;
  assign sbox_0_entry_2_0_wd = reg_wdata[14:10];

  assign sbox_0_entry_3_0_we = addr_hit[0] & reg_we & !reg_error;
  assign sbox_0_entry_3_0_wd = reg_wdata[19:15];

  assign sbox_1_entry_0_1_we = addr_hit[1] & reg_we & !reg_error;
  assign sbox_1_entry_0_1_wd = reg_wdata[4:0];

  assign sbox_1_entry_1_1_we = addr_hit[1] & reg_we & !reg_error;
  assign sbox_1_entry_1_1_wd = reg_wdata[9:5];

  assign sbox_1_entry_2_1_we = addr_hit[1] & reg_we & !reg_error;
  assign sbox_1_entry_2_1_wd = reg_wdata[14:10];

  assign sbox_1_entry_3_1_we = addr_hit[1] & reg_we & !reg_error;
  assign sbox_1_entry_3_1_wd = reg_wdata[19:15];

  assign sbox_2_entry_0_2_we = addr_hit[2] & reg_we & !reg_error;
  assign sbox_2_entry_0_2_wd = reg_wdata[4:0];

  assign sbox_2_entry_1_2_we = addr_hit[2] & reg_we & !reg_error;
  assign sbox_2_entry_1_2_wd = reg_wdata[9:5];

  assign sbox_2_entry_2_2_we = addr_hit[2] & reg_we & !reg_error;
  assign sbox_2_entry_2_2_wd = reg_wdata[14:10];

  assign sbox_2_entry_3_2_we = addr_hit[2] & reg_we & !reg_error;
  assign sbox_2_entry_3_2_wd = reg_wdata[19:15];

  assign sbox_3_entry_0_3_we = addr_hit[3] & reg_we & !reg_error;
  assign sbox_3_entry_0_3_wd = reg_wdata[4:0];

  assign sbox_3_entry_1_3_we = addr_hit[3] & reg_we & !reg_error;
  assign sbox_3_entry_1_3_wd = reg_wdata[9:5];

  assign sbox_3_entry_2_3_we = addr_hit[3] & reg_we & !reg_error;
  assign sbox_3_entry_2_3_wd = reg_wdata[14:10];

  assign sbox_3_entry_3_3_we = addr_hit[3] & reg_we & !reg_error;
  assign sbox_3_entry_3_3_wd = reg_wdata[19:15];

  assign sbox_4_entry_0_4_we = addr_hit[4] & reg_we & !reg_error;
  assign sbox_4_entry_0_4_wd = reg_wdata[4:0];

  assign sbox_4_entry_1_4_we = addr_hit[4] & reg_we & !reg_error;
  assign sbox_4_entry_1_4_wd = reg_wdata[9:5];

  assign sbox_4_entry_2_4_we = addr_hit[4] & reg_we & !reg_error;
  assign sbox_4_entry_2_4_wd = reg_wdata[14:10];

  assign sbox_4_entry_3_4_we = addr_hit[4] & reg_we & !reg_error;
  assign sbox_4_entry_3_4_wd = reg_wdata[19:15];

  assign sbox_5_entry_0_5_we = addr_hit[5] & reg_we & !reg_error;
  assign sbox_5_entry_0_5_wd = reg_wdata[4:0];

  assign sbox_5_entry_1_5_we = addr_hit[5] & reg_we & !reg_error;
  assign sbox_5_entry_1_5_wd = reg_wdata[9:5];

  assign sbox_5_entry_2_5_we = addr_hit[5] & reg_we & !reg_error;
  assign sbox_5_entry_2_5_wd = reg_wdata[14:10];

  assign sbox_5_entry_3_5_we = addr_hit[5] & reg_we & !reg_error;
  assign sbox_5_entry_3_5_wd = reg_wdata[19:15];

  assign sbox_6_entry_0_6_we = addr_hit[6] & reg_we & !reg_error;
  assign sbox_6_entry_0_6_wd = reg_wdata[4:0];

  assign sbox_6_entry_1_6_we = addr_hit[6] & reg_we & !reg_error;
  assign sbox_6_entry_1_6_wd = reg_wdata[9:5];

  assign sbox_6_entry_2_6_we = addr_hit[6] & reg_we & !reg_error;
  assign sbox_6_entry_2_6_wd = reg_wdata[14:10];

  assign sbox_6_entry_3_6_we = addr_hit[6] & reg_we & !reg_error;
  assign sbox_6_entry_3_6_wd = reg_wdata[19:15];

  assign sbox_7_entry_0_7_we = addr_hit[7] & reg_we & !reg_error;
  assign sbox_7_entry_0_7_wd = reg_wdata[4:0];

  assign sbox_7_entry_1_7_we = addr_hit[7] & reg_we & !reg_error;
  assign sbox_7_entry_1_7_wd = reg_wdata[9:5];

  assign sbox_7_entry_2_7_we = addr_hit[7] & reg_we & !reg_error;
  assign sbox_7_entry_2_7_wd = reg_wdata[14:10];

  assign sbox_7_entry_3_7_we = addr_hit[7] & reg_we & !reg_error;
  assign sbox_7_entry_3_7_wd = reg_wdata[19:15];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[4:0]   = sbox_0_entry_0_0_qs;
        reg_rdata_next[9:5]   = sbox_0_entry_1_0_qs;
        reg_rdata_next[14:10] = sbox_0_entry_2_0_qs;
        reg_rdata_next[19:15] = sbox_0_entry_3_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[4:0]   = sbox_1_entry_0_1_qs;
        reg_rdata_next[9:5]   = sbox_1_entry_1_1_qs;
        reg_rdata_next[14:10] = sbox_1_entry_2_1_qs;
        reg_rdata_next[19:15] = sbox_1_entry_3_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[4:0]   = sbox_2_entry_0_2_qs;
        reg_rdata_next[9:5]   = sbox_2_entry_1_2_qs;
        reg_rdata_next[14:10] = sbox_2_entry_2_2_qs;
        reg_rdata_next[19:15] = sbox_2_entry_3_2_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[4:0]   = sbox_3_entry_0_3_qs;
        reg_rdata_next[9:5]   = sbox_3_entry_1_3_qs;
        reg_rdata_next[14:10] = sbox_3_entry_2_3_qs;
        reg_rdata_next[19:15] = sbox_3_entry_3_3_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[4:0]   = sbox_4_entry_0_4_qs;
        reg_rdata_next[9:5]   = sbox_4_entry_1_4_qs;
        reg_rdata_next[14:10] = sbox_4_entry_2_4_qs;
        reg_rdata_next[19:15] = sbox_4_entry_3_4_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[4:0]   = sbox_5_entry_0_5_qs;
        reg_rdata_next[9:5]   = sbox_5_entry_1_5_qs;
        reg_rdata_next[14:10] = sbox_5_entry_2_5_qs;
        reg_rdata_next[19:15] = sbox_5_entry_3_5_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[4:0]   = sbox_6_entry_0_6_qs;
        reg_rdata_next[9:5]   = sbox_6_entry_1_6_qs;
        reg_rdata_next[14:10] = sbox_6_entry_2_6_qs;
        reg_rdata_next[19:15] = sbox_6_entry_3_6_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[4:0]   = sbox_7_entry_0_7_qs;
        reg_rdata_next[9:5]   = sbox_7_entry_1_7_qs;
        reg_rdata_next[14:10] = sbox_7_entry_2_7_qs;
        reg_rdata_next[19:15] = sbox_7_entry_3_7_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule

module ascon_sbox_reg_top_intf #(
    parameter  int AW = 5,
    localparam int DW = 32
) (
    input logic clk_i,
    input logic rst_ni,
    REG_BUS.in regbus_slave,
    // To HW
    output ascon_sbox_reg_pkg::ascon_sbox_reg2hw_t reg2hw,  // Write
    input ascon_sbox_reg_pkg::ascon_sbox_hw2reg_t hw2reg,  // Read
    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);
  localparam int unsigned STRB_WIDTH = DW / 8;

  `include "register_interface/typedef.svh"
  `include "register_interface/assign.svh"

  // Define structs for reg_bus
  typedef logic [AW-1:0] addr_t;
  typedef logic [DW-1:0] data_t;
  typedef logic [STRB_WIDTH-1:0] strb_t;
  `REG_BUS_TYPEDEF_ALL(reg_bus, addr_t, data_t, strb_t)

  reg_bus_req_t s_reg_req;
  reg_bus_rsp_t s_reg_rsp;

  // Assign SV interface to structs
  `REG_BUS_ASSIGN_TO_REQ(s_reg_req, regbus_slave)
  `REG_BUS_ASSIGN_FROM_RSP(regbus_slave, s_reg_rsp)



  ascon_sbox_reg_top #(
      .reg_req_t(reg_bus_req_t),
      .reg_rsp_t(reg_bus_rsp_t),
      .AW(AW)
  ) i_regs (
      .clk_i,
      .rst_ni,
      .reg_req_i(s_reg_req),
      .reg_rsp_o(s_reg_rsp),
      .reg2hw,  // Write
      .hw2reg,  // Read
      .devmode_i
  );

endmodule


