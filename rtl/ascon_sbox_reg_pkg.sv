// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package ascon_sbox_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 5;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    struct packed {logic [4:0] q;} entry_0;
    struct packed {logic [4:0] q;} entry_1;
    struct packed {logic [4:0] q;} entry_2;
    struct packed {logic [4:0] q;} entry_3;
  } ascon_sbox_reg2hw_sbox_mreg_t;

  typedef struct packed {
    struct packed {
      logic [4:0] d;
      logic       de;
    } entry_0;
    struct packed {
      logic [4:0] d;
      logic       de;
    } entry_1;
    struct packed {
      logic [4:0] d;
      logic       de;
    } entry_2;
    struct packed {
      logic [4:0] d;
      logic       de;
    } entry_3;
  } ascon_sbox_hw2reg_sbox_mreg_t;

  // Register -> HW type
  typedef struct packed {
    ascon_sbox_reg2hw_sbox_mreg_t [7:0] sbox;  // [159:0]
  } ascon_sbox_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    ascon_sbox_hw2reg_sbox_mreg_t [7:0] sbox;  // [191:0]
  } ascon_sbox_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] ASCON_SBOX_SBOX_0_OFFSET = 5'h0;
  parameter logic [BlockAw-1:0] ASCON_SBOX_SBOX_1_OFFSET = 5'h4;
  parameter logic [BlockAw-1:0] ASCON_SBOX_SBOX_2_OFFSET = 5'h8;
  parameter logic [BlockAw-1:0] ASCON_SBOX_SBOX_3_OFFSET = 5'hc;
  parameter logic [BlockAw-1:0] ASCON_SBOX_SBOX_4_OFFSET = 5'h10;
  parameter logic [BlockAw-1:0] ASCON_SBOX_SBOX_5_OFFSET = 5'h14;
  parameter logic [BlockAw-1:0] ASCON_SBOX_SBOX_6_OFFSET = 5'h18;
  parameter logic [BlockAw-1:0] ASCON_SBOX_SBOX_7_OFFSET = 5'h1c;

  // Register index
  typedef enum int {
    ASCON_SBOX_SBOX_0,
    ASCON_SBOX_SBOX_1,
    ASCON_SBOX_SBOX_2,
    ASCON_SBOX_SBOX_3,
    ASCON_SBOX_SBOX_4,
    ASCON_SBOX_SBOX_5,
    ASCON_SBOX_SBOX_6,
    ASCON_SBOX_SBOX_7
  } ascon_sbox_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] ASCON_SBOX_PERMIT[8] = '{
      4'b0111,  // index[0] ASCON_SBOX_SBOX_0
      4'b0111,  // index[1] ASCON_SBOX_SBOX_1
      4'b0111,  // index[2] ASCON_SBOX_SBOX_2
      4'b0111,  // index[3] ASCON_SBOX_SBOX_3
      4'b0111,  // index[4] ASCON_SBOX_SBOX_4
      4'b0111,  // index[5] ASCON_SBOX_SBOX_5
      4'b0111,  // index[6] ASCON_SBOX_SBOX_6
      4'b0111  // index[7] ASCON_SBOX_SBOX_7
  };

endpackage

