# S-box definitions for ASCON cryptographic operations
# Each S-box contains 32 entries (5-bit input -> 5-bit output)

sbox = {
    "sbox_ascon": [
        0x04, 0x0b, 0x1f, 0x14, 0x1a, 0x15, 0x09, 0x02, 0x1b, 0x05, 0x08, 0x12, 0x1d, 0x03, 0x06, 0x1c,
        0x1e, 0x13, 0x07, 0x0e, 0x00, 0x0d, 0x11, 0x18, 0x10, 0x0c, 0x01, 0x19, 0x16, 0x0a, 0x0f, 0x17
    ],
    "sbox_bilgin": [
        0x01, 0x00, 0x19, 0x1a, 0x11, 0x1d, 0x15, 0x1b, 0x14, 0x05, 0x04, 0x17, 0x0e, 0x12, 0x02, 0x1c,
        0x0f, 0x08, 0x06, 0x03, 0x0d, 0x07, 0x18, 0x10, 0x1e, 0x09, 0x1f, 0x0a, 0x16, 0x0c, 0x0b, 0x13
    ],
    "sbox_allouzi": [
        0x10, 0x0e, 0x0d, 0x02, 0x0b, 0x11, 0x15, 0x1e, 0x07, 0x18, 0x12, 0x1c, 0x1a, 0x01, 0x0c, 0x06,
        0x1f, 0x19, 0x00, 0x17, 0x14, 0x16, 0x08, 0x1b, 0x04, 0x03, 0x13, 0x05, 0x09, 0x0a, 0x1d, 0x0f
    ],
    "sbox_lu_4": [
        0x18, 0x09, 0x1b, 0x06, 0x03, 0x1f, 0x16, 0x01, 0x14, 0x1e, 0x08, 0x05, 0x0a, 0x15, 0x0f, 0x10,
        0x04, 0x13, 0x17, 0x0c, 0x1c, 0x00, 0x0d, 0x1a, 0x07, 0x0b, 0x19, 0x12, 0x11, 0x14, 0x02, 0x1d
    ],
    "sbox_lu_5": [
        0x17, 0x1c, 0x0f, 0x10, 0x02, 0x01, 0x15, 0x1e, 0x19, 0x13, 0x12, 0x0c, 0x0b, 0x08, 0x0d, 0x06,
        0x18, 0x0e, 0x00, 0x03, 0x05, 0x1d, 0x0a, 0x1b, 0x04, 0x07, 0x1f, 0x09, 0x1a, 0x16, 0x14, 0x11
    ],
    "sbox_lu_6": [
        0x03, 0x0d, 0x1a, 0x16, 0x11, 0x02, 0x0f, 0x15, 0x00, 0x17, 0x0c, 0x09, 0x14, 0x19, 0x1e, 0x0a,
        0x1b, 0x0e, 0x04, 0x1d, 0x1c, 0x08, 0x01, 0x12, 0x07, 0x18, 0x10, 0x13, 0x1f, 0x06, 0x0b, 0x05
    ],
    "sbox_lu_7": [
        0x16, 0x0f, 0x10, 0x09, 0x1b, 0x03, 0x05, 0x06, 0x01, 0x15, 0x1e, 0x12, 0x1c, 0x08, 0x0a, 0x1d,
        0x0e, 0x00, 0x0d, 0x1a, 0x18, 0x14, 0x11, 0x1f, 0x13, 0x0c, 0x07, 0x19, 0x0b, 0x17, 0x04, 0x02
    ]
}


def get_sbox_update_data(sbox_type, start_addr):
    """
    Read 4 consecutive entries from the specified S-box starting at start_addr.
    Extract the 5 least significant bits from each entry and compose a 20-bit value.
    
    Args:
        sbox_type (str): The type of S-box to use (e.g., "sbox_ascon")
        start_addr (int): Starting address (0-28, since we need 4 consecutive entries)
    
    Returns:
        int: 20-bit value composed from 5 LSBs of each entry
        
    The 20-bit value is organized as:
    [entry3_lsb5][entry2_lsb5][entry1_lsb5][entry0_lsb5]
    where entry0 is at start_addr, entry1 at start_addr+1, etc.
    """
    if sbox_type not in sbox:
        raise ValueError(f"Unknown S-box type: {sbox_type}")
    
    if start_addr < 0 or start_addr > 28:  # 32 - 4 = 28
        raise ValueError(f"Invalid start address: {start_addr}. Must be 0-28.")
    
    selected_sbox = sbox[sbox_type]
    
    # Read 4 consecutive entries
    entries = [selected_sbox[start_addr + i] for i in range(4)]
    
    # Extract 5 LSBs from each entry and compose 20-bit value
    # entry0 goes to bits [4:0], entry1 to bits [9:5], etc.
    result = 0
    for i, entry in enumerate(entries):
        lsb5 = entry & 0x1F  # Extract 5 least significant bits
        result |= (lsb5 << (i * 5))  # Shift to correct position
    
    return result


def get_all_sbox_entries(sbox_type):
    """
    Get all possible 20-bit update values for a given S-box type.
    This generates all possible consecutive 4-entry groups.
    
    Args:
        sbox_type (str): The type of S-box to use
        
    Returns:
        list: List of tuples (start_addr, 20_bit_value) for all possible groups
    """
    if sbox_type not in sbox:
        raise ValueError(f"Unknown S-box type: {sbox_type}")
    
    result = []
    for start_addr in range(29):  # 0 to 28 (32 - 4 = 28)
        update_data = get_sbox_update_data(sbox_type, start_addr)
        result.append((start_addr, update_data))
    
    return result


def print_sbox_info(sbox_type):
    """
    Print information about a specific S-box.
    
    Args:
        sbox_type (str): The type of S-box to print info for
    """
    if sbox_type not in sbox:
        print(f"Unknown S-box type: {sbox_type}")
        return
    
    print(f"S-box: {sbox_type}")
    print("Entries:")
    selected_sbox = sbox[sbox_type]
    for i in range(0, 32, 8):
        line = " ".join(f"0x{selected_sbox[j]:02x}" for j in range(i, min(i+8, 32)))
        print(f"  {i:2d}-{min(i+7, 31):2d}: {line}")
    print()
